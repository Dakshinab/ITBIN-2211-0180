package View;


import View.DashBoard;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dakshina Dissanayake
 */
public class AddOrders extends javax.swing.JFrame {

    private String customerName;
    private String selectedDrink = "Select Drink";
    
    /**
     * Creates new form AddOrders
     */
    public AddOrders() {
        initComponents();
        showAddOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        TakeAway = new javax.swing.JRadioButton();
        Dining = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        cusId = new javax.swing.JTextField();
        drinkName = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_Display_User = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Drink Name:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, 170, 40));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Quantity:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 146, 40));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Take away or Dining: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, 270, 40));
        jPanel1.add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 420, 40));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton1.setText("Add details & Confirm Order");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, 230, 60));

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton2.setText("Update");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 130, 100, 50));

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton3.setText("Delete Details & Cancel Order");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 200, 230, 60));

        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton4.setText("Back");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 525, 70, 30));

        ButtonGroup.add(TakeAway);
        TakeAway.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TakeAway.setText("Take away");
        TakeAway.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TakeAwayActionPerformed(evt);
            }
        });
        jPanel1.add(TakeAway, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, -1, -1));

        ButtonGroup.add(Dining);
        Dining.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Dining.setText("Dining");
        Dining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiningActionPerformed(evt);
            }
        });
        jPanel1.add(Dining, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Customer ID:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        cusId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusIdActionPerformed(evt);
            }
        });
        jPanel1.add(cusId, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 420, 40));

        drinkName.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        drinkName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Drink", "Cappuccino", "Espresso", "Latte", "Lungo", "Ristretto", "Caff√® Macchiato" }));
        drinkName.setToolTipText("");
        drinkName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drinkNameActionPerformed(evt);
            }
        });
        jPanel1.add(drinkName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 280, 50));

        jTable1_Display_User.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Drink Name", "Customer Name", "Quantity", "Take away or Dining"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1_Display_User.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1_Display_UserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1_Display_User);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 840, 180));

        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton5.setText("Reset");
        jButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 130, 100, 50));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Order Details...");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 330, 70));

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Dakshina Dissanayake\\Desktop\\coffee-ai-generated.jpg")); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 590));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new DashBoard().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void drinkNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drinkNameActionPerformed
        // TODO add your handling code here:
        selectedDrink = drinkName.getSelectedItem().toString();
        
        
    }//GEN-LAST:event_drinkNameActionPerformed

    private void TakeAwayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TakeAwayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TakeAwayActionPerformed

    private void DiningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiningActionPerformed

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    String drinkName = selectedDrink;
    String quantityText = quantity.getText();
    String customerID = cusId.getText();
    String takeAwayOrDining = TakeAway.isSelected() ? "Take away" : "Dining";

    int quantity;
    
    // Validate inputs
    if (drinkName.equals("Select Drink") || drinkName.isEmpty() || quantityText.isEmpty() || customerID.isEmpty() || (!TakeAway.isSelected() && !Dining.isSelected())) {
        // Show error message if inputs are not valid
        JOptionPane.showMessageDialog(this, "Please fill in all fields and select Take away or Dining.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {

    // Parse quantity
    try {
        quantity = Integer.parseInt(quantityText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Quantity must be a number.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Get customer name associated with provided Customer_ID
        customerName = getCustomerName(customerID); // Corrected: Use customerID instead of customerName
        if (customerName == null) {
            JOptionPane.showMessageDialog(this, "Invalid Customer ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    // Database connection
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
        String query = "INSERT INTO addorders (Drink_Name, Customer_Name, Quantity, TakeAway_or_Dining) VALUES (?, ?, ?, ?)";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, drinkName);
        pst.setString(2, customerName);
        pst.setInt(3, quantity);
        pst.setString(4, takeAwayOrDining);

        // Execute the query
        pst.executeUpdate();

        JOptionPane.showMessageDialog(null, "Order added successfully!");
        
        // Update the table
        showAddOrders();

        // Reset input fields
        resetFields();

        // Close resources
        pst.close();
        con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1_Display_UserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1_Display_UserMouseClicked
// Get the selected row index
    int rowIndex = jTable1_Display_User.getSelectedRow();

    // Check if a row is selected
    if (rowIndex != -1) {
        // Get the data from the selected row
        String selectedDrinkName = jTable1_Display_User.getValueAt(rowIndex, 1).toString();
        String selectedCustomerName = jTable1_Display_User.getValueAt(rowIndex, 2).toString();
        String selectedQuantity = jTable1_Display_User.getValueAt(rowIndex, 3).toString();
        String selectedTakeAwayOrDining = jTable1_Display_User.getValueAt(rowIndex, 4).toString();

        // Autofill the fields with the selected data
        drinkName.setSelectedItem(selectedDrinkName);
        String selectedCustomerID = getCustomerID(selectedCustomerName); // Get customer ID
        cusId.setText(selectedCustomerID); // Set Customer_ID
        quantity.setText(selectedQuantity);

        // Check the appropriate radio button based on the selection
        if (selectedTakeAwayOrDining.equals("Take away")) {
            TakeAway.setSelected(true);
        } else {
            Dining.setSelected(true);
        }
    }
    }//GEN-LAST:event_jTable1_Display_UserMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
int row = jTable1_Display_User.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        String drinkName = selectedDrink;
        String quantityText = quantity.getText();
        String customerID = cusId.getText();
        String takeAwayOrDining = TakeAway.isSelected() ? "Take away" : "Dining";

        int quantity;
        if (drinkName.isEmpty() || quantityText.isEmpty() || customerID.isEmpty() || (!TakeAway.isSelected() && !Dining.isSelected())) {
            // Show error message if inputs are not valid
            JOptionPane.showMessageDialog(this, "Please fill in all fields and select Take away or Dining.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Parse quantity
            try {
                quantity = Integer.parseInt(quantityText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Quantity must be a number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get customer name associated with provided Customer_ID
            customerName = getCustomerName(customerID);
            if (customerName == null) {
                JOptionPane.showMessageDialog(this, "Invalid Customer ID.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Database connection
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
                String query = "UPDATE addorders SET Drink_Name = ?, Customer_Name = ?, Quantity = ?, TakeAway_or_Dining = ? WHERE Order_ID = ?";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, drinkName);
                pst.setString(2, customerName);
                pst.setInt(3, quantity);
                pst.setString(4, takeAwayOrDining);
                pst.setString(5, jTable1_Display_User.getValueAt(row, 0).toString()); // Order_ID

                // Execute the query
                pst.executeUpdate();

                JOptionPane.showMessageDialog(null, "Order updated successfully!");

                // Update the table
                showAddOrders();

                // Reset input fields
                resetFields();

                // Close resources
                pst.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    int row = jTable1_Display_User.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
                String query = "DELETE FROM addorders WHERE Order_ID = ?";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, jTable1_Display_User.getValueAt(row, 0).toString());
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Delete successful");
                showAddOrders();
                resetFields();
                pst.close();
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cusIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cusIdActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    // Clear all input fields
    quantity.setText("");
    cusId.setText("");
    // Clear radio button selection
    ButtonGroup.clearSelection();
    // Reset ComboBox selection to the first item
    drinkName.setSelectedIndex(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    
    private void showAddOrders() {
        // Display orders in the table
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
        String query = "SELECT * FROM addorders";
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery(query);

        DefaultTableModel model = (DefaultTableModel) jTable1_Display_User.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            int orderID = rs.getInt("Order_ID");
            String drinkName = rs.getString("Drink_Name");
            String customerId = rs.getString("Customer_Name");
            int quantity = rs.getInt("Quantity");
            String takeAwayOrDining = rs.getString("TakeAway_or_Dining");
            model.addRow(new Object[]{orderID, drinkName, customerId, quantity, takeAwayOrDining});
        }

        rs.close();
        st.close();
        con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    }
    
    // Method to retrieve customer name from database
    private String getCustomerName(String customerID) {
        String customerName = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
            String query = "SELECT Name FROM addcustomer WHERE Customer_ID = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, customerID);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                customerName = rs.getString("Name");
            }
            rs.close();
            pst.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return customerName;
    }
    
    // Method to retrieve customer ID from database based on customer name
    private String getCustomerID(String customerName) {
    String customerID = null;
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coffee shop", "root", "");
        String query = "SELECT Customer_ID FROM addcustomer WHERE Name = ?";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, customerName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            customerID = rs.getString("Customer_ID");
        }
        rs.close();
        pst.close();
        con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    return customerID;
}

    
    private void resetFields() {
    quantity.setText("");
    cusId.setText("");
    ButtonGroup.clearSelection();
    drinkName.setSelectedIndex(0);
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddOrders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ButtonGroup;
    private javax.swing.JRadioButton Dining;
    private javax.swing.JRadioButton TakeAway;
    private javax.swing.JTextField cusId;
    private javax.swing.JComboBox<String> drinkName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1_Display_User;
    private javax.swing.JTextField quantity;
    // End of variables declaration//GEN-END:variables
}
